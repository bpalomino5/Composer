/**
 * CUP file for generating the values for the Toy language tokens.
 * Check EOL characters if file does not seem to read.
 */

import java_cup.runtime.*;

/* Parser code */
parser code {:
    // StringBuilder for holding the output string.
    StringBuilder output = new StringBuilder();
    // Symbol table
    sym s = new sym();
    // ID of the current token
    int symIndex;

    /**
     * Return the string value for a given symbol.
     */
    public String getSymbolOutputString(Symbol symbol) {
        // Get int corresponding to Symbol type.
        symIndex = Integer.parseInt(symbol.toString().substring(1));
        // If symbol is an _id return its value.  Else, if symbol is an EOF return an empty string.
        // Else, return the value from sym.terminalNames[];
        String val;
        if (symIndex == 48) {
            val = (String) symbol.value + " ";
        } else if (symIndex == 0) {
            val = "";
        } else {
            val = sym.terminalNames[symIndex] + " ";
        }
        return val;
    }

    /**
     * Add a reduce rule with the given number to the output string.
     */
    public void reduceRuleOutput(int ruleNum) {
        output.insert(output.length() - 7, "[reduce ");
        output.insert(output.length() - 7, ruleNum);
        output.insert(output.length() - 7, ']');
    }
    
    /**
     * Override the default report_error() method.
     */
    public void report_fatal_error(String message, Object info) {
        System.out.println("[reject]");
    }
    
    /**
     * Override the default report_error() method.
     */
    public void report_error(String message, Object info) {
        // Do nothing
    }
    
    /**
     * Override the default report_syntax_error() method.
     */
    public void syntax_error(Symbol cur_token) {
        // Do nothing
    }
:}

/* Scan with */
scan with {:
    // Print and clear output string
    if (output.length() > 0) {
        System.out.println(output.toString());
        output.delete(0, output.length());
    }

    // Get next token and print it
    Symbol token = getScanner().next_token();
    System.out.print(getSymbolOutputString(token));

    // Add a "shift" to the end of the output string.
    output = output.append("[shift]");

    return token;
:}

/* terminals */
terminal _boolean;
terminal _break;
terminal _class;
terminal _double;
terminal _else;
terminal _extends;
terminal _for;
terminal _if;
terminal _implements;
terminal _int;
terminal _interface;
terminal _newarray;
terminal _println;
terminal _readln;
terminal _return;
terminal _string;
terminal _void;
terminal _while;
terminal _plus;
terminal _minus;
terminal _multiplication;
terminal _division;
terminal _mod;
terminal _less;
terminal _lessequal;
terminal _greater;
terminal _greaterequal;
terminal _equal;
terminal _notequal;
terminal _and;
terminal _or;
terminal _not;
terminal _assignop;
terminal _semicolon;
terminal _comma;
terminal _period;
terminal _leftparen;
terminal _rightparen;
terminal _leftbracket;
terminal _rightbracket;
terminal _leftbrace;
terminal _rightbrace;
terminal _intconstant;
terminal _doubleconstant;
terminal _stringconstant;
terminal _booleanconstant;
terminal _id;

/* non terminals */
non terminal Program;
non terminal A;
non terminal Decl;
non terminal VariableDecl;
non terminal FunctionDecl;
non terminal ClassDecl;
non terminal InterfaceDecl;
non terminal Variable;
non terminal Type;
non terminal Primitive;
non terminal Nonprimitive;
non terminal NonprimitiveArray;
non terminal Formals;
non terminal StmtBlock;
non terminal B;
non terminal C;
non terminal D;
non terminal E;
non terminal F;
non terminal Field;
non terminal G;
non terminal Prototype;
non terminal H;
non terminal I;
non terminal Stmt;
non terminal IfStmt;
non terminal WhileStmt;
non terminal ForStmt;
non terminal BreakStmt;
non terminal ReturnStmt;
non terminal PrintStmt;
non terminal J;
non terminal Expr;
non terminal L;
non terminal Lvalue;
non terminal Constant;
non terminal Call;
non terminal Actuals;
non terminal IdLbracket;
non terminal IdPeriod;

/* Precedence */
precedence left _assignop;
precedence left _or;
precedence left _and;
precedence left _equal, _notequal;
precedence nonassoc _greater, _greaterequal, _less, _lessequal;
precedence left _plus, _minus;
precedence left _multiplication, _division, _mod;
precedence left _not;
//precedence left _leftbracket, _period;

/* Grammar rules */
Program             ::= A
                        {:
                            reduceRuleOutput(1);
                            System.out.println(output.toString().substring(0, output.length() - 7));
                            output.delete(0, output.length());
                            if (symIndex == 0) {
                                System.out.println("[accept]");
                            }
                        :}
                    ;
A                   ::= Decl
                            {: reduceRuleOutput(2); :}
                    |   Decl A
                            {: reduceRuleOutput(3); :}
                    ;
Decl                ::= VariableDecl
                            {: reduceRuleOutput(4); :}
                    |   FunctionDecl
                            {: reduceRuleOutput(5); :}
                    |   ClassDecl
                            {: reduceRuleOutput(6); :}
                    |   InterfaceDecl
                            {: reduceRuleOutput(7); :}
                    ;
VariableDecl        ::= Variable _semicolon
                            {: reduceRuleOutput(8); :}
                    ;
Variable            ::= Type _id
                            {: reduceRuleOutput(9); :}
                    ;
Type                ::= Primitive
                            {: reduceRuleOutput(10); :}
                    |   Nonprimitive
                            {: reduceRuleOutput(11); :}
                    ;
Primitive           ::= _int
                            {: reduceRuleOutput(12); :}
                    |   _double
                            {: reduceRuleOutput(13); :}
                    |   _boolean
                            {: reduceRuleOutput(14); :}
                    |   _string
                            {: reduceRuleOutput(15); :}
                    |   Primitive _leftbracket _rightbracket
                            {: reduceRuleOutput(16); :}
                    ;
Nonprimitive        ::= NonprimitiveArray
                            {: reduceRuleOutput(17); :}
                    |   _id
                            {: reduceRuleOutput(18); :}
                    ;
NonprimitiveArray   ::= IdLbracket _rightbracket
                            {: reduceRuleOutput(19); :}
                    |   NonprimitiveArray _leftbracket _rightbracket
                            {: reduceRuleOutput(20); :}
                    ;
FunctionDecl        ::= Type _id _leftparen Formals _rightparen StmtBlock
                            {: reduceRuleOutput(21); :}
                    |   _void _id _leftparen Formals _rightparen StmtBlock
                            {: reduceRuleOutput(22); :}
                    |   Type _id _leftparen _rightparen StmtBlock
                            {: reduceRuleOutput(23); :}
                    |   _void _id _leftparen _rightparen StmtBlock
                            {: reduceRuleOutput(24); :}
                    ;
Formals             ::= B
                            {: reduceRuleOutput(25); :}
                    ;
B                   ::= Variable
                            {: reduceRuleOutput(26); :}
                    |   Variable _comma B
                            {: reduceRuleOutput(27); :}
                    ;
ClassDecl           ::= _class _id C D _leftbrace E _leftbrace
                            {: reduceRuleOutput(27); :}
                    |   _class _id D _leftbrace E _rightbrace
                            {: reduceRuleOutput(29); :}
                    |   _class _id C _leftbrace E _rightbrace
                            {: reduceRuleOutput(30); :}
                    |   _class _id _leftbrace E _rightbrace
                            {: reduceRuleOutput(31); :}
                    |   _class _id C D _leftbrace _rightbrace
                            {: reduceRuleOutput(32); :}
                    |   _class _id D _leftbrace _rightbrace
                            {: reduceRuleOutput(33); :}
                    |   _class _id C _leftbrace _rightbrace
                            {: reduceRuleOutput(34); :}
                    |   _class _id _leftbrace _rightbrace
                            {: reduceRuleOutput(35); :}
                    ;
C                   ::= _extends _id
                            {: reduceRuleOutput(36); :}
                    ;
D                   ::= F
                            {: reduceRuleOutput(37); :}
                    ;
F                   ::= _implements _id
                            {: reduceRuleOutput(38); :}
                    |   _implements _id _comma F
                            {: reduceRuleOutput(39); :}
                    ;
E                   ::= Field E
                            {: reduceRuleOutput(40); :}
                    |   Field
                            {: reduceRuleOutput(41); :}
                    ;
Field               ::= VariableDecl
                            {: reduceRuleOutput(42); :}
                    |   FunctionDecl
                            {: reduceRuleOutput(43); :}
                    ;
InterfaceDecl       ::= _interface _id _leftbrace G _rightbrace
                            {: reduceRuleOutput(44); :}
                    |   _interface _id _leftbrace _rightbrace
                            {: reduceRuleOutput(45); :}
                    ;
G                   ::= Prototype G
                            {: reduceRuleOutput(46); :}
                    |   Prototype
                            {: reduceRuleOutput(47); :}
                    ;
Prototype           ::= Type _id _leftparen Formals _rightparen _semicolon
                            {: reduceRuleOutput(48); :}
                    |   _void _id _leftparen Formals _rightparen _semicolon
                            {: reduceRuleOutput(49); :}
                    |   Type _id _leftparen _rightparen _semicolon
                            {: reduceRuleOutput(50); :}
                    |   _void _id _leftparen _rightparen _semicolon
                            {: reduceRuleOutput(51); :}
                    ;
StmtBlock           ::= _leftbrace I _rightbrace
                            {: reduceRuleOutput(52); :}
                    |   _leftbrace H _rightbrace
                            {: reduceRuleOutput(53); :}
                    |   _leftbrace _rightbrace
                            {: reduceRuleOutput(54); :}
                    ;
H                   ::= VariableDecl
                            {: reduceRuleOutput(55); :}
                    |   VariableDecl H
                            {: reduceRuleOutput(56); :}
                    |   VariableDecl I
                            {: reduceRuleOutput(57); :}
                    ;
I                   ::= Stmt I
                            {: reduceRuleOutput(58); :}
                    |   Stmt
                            {: reduceRuleOutput(59); :}
                    ;
Stmt                ::= J _semicolon
                            {: reduceRuleOutput(60); :}
                    |   IfStmt
                            {: reduceRuleOutput(61); :}
                    |   WhileStmt
                            {: reduceRuleOutput(62); :}
                    |   ForStmt
                            {: reduceRuleOutput(63); :}
                    |   BreakStmt
                            {: reduceRuleOutput(64); :}
                    |   ReturnStmt
                            {: reduceRuleOutput(65); :}
                    |   PrintStmt
                            {: reduceRuleOutput(66); :}
                    |   StmtBlock
                            {: reduceRuleOutput(67); :}
                    |   _semicolon
                            {: reduceRuleOutput(68); :}
                    ;
J                   ::= Expr
                            {: reduceRuleOutput(69); :}
                    ;
IfStmt              ::= _if _leftparen Expr _rightparen Stmt _else Stmt
                            {: reduceRuleOutput(70); :}
                    |   _if _leftparen Expr _rightparen Stmt
                            {: reduceRuleOutput(71); :}
                    ;
WhileStmt           ::= _while _leftparen Expr _rightparen Stmt
                            {: reduceRuleOutput(72); :}
                    ;
ForStmt             ::= _for _leftparen J _semicolon Expr _semicolon J _rightparen Stmt
                            {: reduceRuleOutput(73); :}
                    |   _for _leftparen _semicolon Expr _semicolon J _rightparen
                            {: reduceRuleOutput(74); :}
                    |   _for _leftparen J _semicolon Expr _semicolon _rightparen
                            {: reduceRuleOutput(75); :}
                    |   _for _leftparen _semicolon Expr _semicolon _rightparen
                            {: reduceRuleOutput(76); :}
                    ;
BreakStmt           ::= _break
                            {: reduceRuleOutput(77); :}
                    ;
ReturnStmt          ::= _return J _semicolon
                            {: reduceRuleOutput(78); :}
                    |   _return _semicolon
                            {: reduceRuleOutput(79); :}
                    ;
PrintStmt           ::= _println _leftparen L _rightparen _semicolon
                            {: reduceRuleOutput(80); :}
                    ;
L                   ::= Expr
                            {: reduceRuleOutput(81); :}
                    |   Expr _comma L
                            {: reduceRuleOutput(82); :}
                    ;
Expr                ::= Lvalue _assignop Expr
                            {: reduceRuleOutput(83); :}
                    |   Expr _or Expr
                            {: reduceRuleOutput(84); :}
                    |   Expr _and Expr
                            {: reduceRuleOutput(85); :}
                    |   Expr _equal Expr
                            {: reduceRuleOutput(86); :}
                    |   Expr _notequal Expr
                            {: reduceRuleOutput(87); :}
                    |   Expr _less Expr
                            {: reduceRuleOutput(88); :}
                    |   Expr _lessequal Expr
                            {: reduceRuleOutput(89); :}
                    |   Expr _greater Expr
                            {: reduceRuleOutput(90); :}
                    |   Expr _greaterequal Expr
                            {: reduceRuleOutput(91); :}
                    |   Expr _plus Expr
                            {: reduceRuleOutput(92); :}
                    |   Expr _minus Expr
                            {: reduceRuleOutput(93); :}
                    |   Expr _multiplication Expr
                            {: reduceRuleOutput(94); :}
                    |   Expr _division Expr
                            {: reduceRuleOutput(95); :}
                    |   Expr _mod Expr
                            {: reduceRuleOutput(96); :}
                    |   _not Expr
                            {: reduceRuleOutput(97); :}
                    |   _minus Expr
                            {: reduceRuleOutput(98); :} %prec _not 
                            // Used the precedence for _not because unary minus and _not are in the same precedence 
                            // group, and there is no nonterminal for unary minus.
                    |   _leftparen Expr _rightparen
                            {: reduceRuleOutput(99); :}
                    |   Constant
                            {: reduceRuleOutput(100); :}
                    |   Lvalue
                            {: reduceRuleOutput(101); :}
                    |   Call
                            {: reduceRuleOutput(102); :}
                    |   _readln _leftparen _rightparen
                            {: reduceRuleOutput(103); :}
                    |   _newarray _leftparen _intconstant _comma Type _rightparen
                            {: reduceRuleOutput(104); :}
                    ;
Lvalue              ::= _id
                            {: reduceRuleOutput(105); :}
                    |   IdLbracket Expr _rightbracket
                            {: reduceRuleOutput(106); :}
                    |   Lvalue _period _id
                            {: reduceRuleOutput(107); :}
                    |   IdPeriod _id
                            {: reduceRuleOutput(108); :}
                    ;
Call                ::= _id _leftparen Actuals _rightparen
                            {: reduceRuleOutput(109); :}
                    |   IdPeriod _id _leftparen Actuals _rightparen
                            {: reduceRuleOutput(110); :}
                    |   _id _leftparen _rightparen
                            {: reduceRuleOutput(111); :}
                    |   IdPeriod _id _leftparen _rightparen
                            {: reduceRuleOutput(112); :}
                    ;
Actuals             ::= L
                            {: reduceRuleOutput(113); :}
                    ;
Constant            ::= _intconstant
                            {: reduceRuleOutput(114); :}
                    |   _doubleconstant
                            {: reduceRuleOutput(115); :}
                    |   _stringconstant
                            {: reduceRuleOutput(116); :}
                    |   _booleanconstant
                            {: reduceRuleOutput(117); :}
                    ;
IdLbracket          ::= _id _leftbracket
                            {: reduceRuleOutput(118); :}
                    ;
IdPeriod            ::= _id _period
                            {: reduceRuleOutput(119); :}
                    ;